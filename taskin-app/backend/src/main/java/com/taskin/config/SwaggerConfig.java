package com.taskin.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

/**
 * Configura√ß√£o do Swagger/OpenAPI para documenta√ß√£o da API
 */
@Configuration
public class SwaggerConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(apiInfo())
                .servers(apiServers())
                .addSecurityItem(new SecurityRequirement().addList("bearerAuth"))
                .components(new Components()
                    .addSecuritySchemes("bearerAuth", 
                        new SecurityScheme()
                            .type(SecurityScheme.Type.HTTP)
                            .scheme("bearer")
                            .bearerFormat("JWT")
                            .description("JWT token de autentica√ß√£o. Formato: Bearer {token}")
                    )
                );
    }

    private Info apiInfo() {
        return new Info()
                .title("Taskin API")
                .description("""
                    # API REST para Gerenciamento de Tarefas
                    
                    ## Vis√£o Geral
                    A **Taskin API** √© um sistema completo para gerenciamento de tarefas e produtividade, 
                    desenvolvido com Spring Boot e projetado para integra√ß√£o com aplicativos m√≥veis React Native.
                    
                    ## Funcionalidades Principais
                    
                    ### üîê Autentica√ß√£o
                    - Registro e login de usu√°rios
                    - Autentica√ß√£o JWT com refresh tokens
                    - Gerenciamento de perfis de usu√°rio
                    
                    ### üìã Gerenciamento de Tarefas
                    - CRUD completo de tarefas
                    - Sistema de prioridades (Baixa, M√©dia, Alta, Urgente)
                    - Status de tarefas (Pendente, Em Progresso, Conclu√≠da, Cancelada)
                    - Defini√ß√£o de prazos e lembretes
                    - Busca e filtros avan√ßados
                    
                    ### üóÇÔ∏è Organiza√ß√£o
                    - Sistema de categorias personaliz√°veis
                    - Categorias padr√£o pr√©-definidas
                    - Cores e √≠cones customiz√°veis
                    - Estat√≠sticas por categoria
                    
                    ### üìä Dashboard e Analytics
                    - Estat√≠sticas de produtividade
                    - Resumo di√°rio de atividades
                    - M√©tricas de desempenho
                    - Relat√≥rios por per√≠odo
                    
                    ### üîÑ Sincroniza√ß√£o
                    - Suporte √† sincroniza√ß√£o offline/online
                    - Controle de vers√µes de dados
                    - Resolu√ß√£o de conflitos
                    
                    ## Como Usar
                    
                    ### 1. Autentica√ß√£o
                    ```
                    POST /api/auth/register - Criar conta
                    POST /api/auth/login    - Fazer login
                    GET  /api/auth/me       - Obter dados do usu√°rio
                    ```
                    
                    ### 2. Tarefas
                    ```
                    GET    /api/tasks       - Listar tarefas
                    POST   /api/tasks       - Criar tarefa
                    PUT    /api/tasks/{id}  - Atualizar tarefa
                    DELETE /api/tasks/{id}  - Excluir tarefa
                    ```
                    
                    ### 3. Categorias
                    ```
                    GET    /api/categories       - Listar categorias
                    POST   /api/categories       - Criar categoria
                    PUT    /api/categories/{id}  - Atualizar categoria
                    ```
                    
                    ### 4. Dashboard
                    ```
                    GET /api/dashboard/stats - Estat√≠sticas gerais
                    GET /api/dashboard/today - Resumo do dia
                    ```
                    
                    ## Autentica√ß√£o
                    A API utiliza **JWT (JSON Web Tokens)** para autentica√ß√£o. Ap√≥s o login, 
                    inclua o token no header `Authorization` de todas as requisi√ß√µes:
                    
                    ```
                    Authorization: Bearer {seu_token_aqui}
                    ```
                    
                    ## C√≥digos de Status
                    - `200` - Sucesso
                    - `201` - Criado com sucesso
                    - `400` - Dados inv√°lidos
                    - `401` - N√£o autorizado
                    - `404` - N√£o encontrado
                    - `500` - Erro interno do servidor
                    
                    ## Versionamento
                    Esta √© a vers√£o **1.0.0** da API. Futuras vers√µes manter√£o compatibilidade 
                    com esta vers√£o sempre que poss√≠vel.
                    """)
                .version("1.0.0")
                .contact(new Contact()
                    .name("Taskin Support")
                    .email("support@taskin.com")
                    .url("https://taskin.com/support"))
                .license(new License()
                    .name("MIT License")
                    .url("https://opensource.org/licenses/MIT"));
    }

    private List<Server> apiServers() {
        return List.of(
            new Server()
                .url("http://localhost:8080")
                .description("Servidor de Desenvolvimento"),
            new Server()
                .url("https://api.taskin.com")
                .description("Servidor de Produ√ß√£o")
        );
    }
}